// Generated by view binder compiler. Do not edit!
package com.example.aidflow.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.aidflow.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDonationDonateFilterBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView categoryDonateFilter;

  @NonNull
  public final CheckBox checkBoxCleanWater;

  @NonNull
  public final CheckBox checkBoxCommunityProject;

  @NonNull
  public final CheckBox checkBoxDisasterRelief;

  @NonNull
  public final CheckBox checkBoxHealthCare;

  @NonNull
  public final CheckBox checkBoxHighPriority;

  @NonNull
  public final CheckBox checkBoxLowPriority;

  @NonNull
  public final CheckBox checkBoxModerate;

  @NonNull
  public final CheckBox checkBoxOrphanage;

  private FragmentDonationDonateFilterBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView categoryDonateFilter, @NonNull CheckBox checkBoxCleanWater,
      @NonNull CheckBox checkBoxCommunityProject, @NonNull CheckBox checkBoxDisasterRelief,
      @NonNull CheckBox checkBoxHealthCare, @NonNull CheckBox checkBoxHighPriority,
      @NonNull CheckBox checkBoxLowPriority, @NonNull CheckBox checkBoxModerate,
      @NonNull CheckBox checkBoxOrphanage) {
    this.rootView = rootView;
    this.categoryDonateFilter = categoryDonateFilter;
    this.checkBoxCleanWater = checkBoxCleanWater;
    this.checkBoxCommunityProject = checkBoxCommunityProject;
    this.checkBoxDisasterRelief = checkBoxDisasterRelief;
    this.checkBoxHealthCare = checkBoxHealthCare;
    this.checkBoxHighPriority = checkBoxHighPriority;
    this.checkBoxLowPriority = checkBoxLowPriority;
    this.checkBoxModerate = checkBoxModerate;
    this.checkBoxOrphanage = checkBoxOrphanage;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDonationDonateFilterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDonationDonateFilterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_donation_donate_filter, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDonationDonateFilterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.category_donateFilter;
      TextView categoryDonateFilter = ViewBindings.findChildViewById(rootView, id);
      if (categoryDonateFilter == null) {
        break missingId;
      }

      id = R.id.checkBox_cleanWater;
      CheckBox checkBoxCleanWater = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxCleanWater == null) {
        break missingId;
      }

      id = R.id.checkBox_communityProject;
      CheckBox checkBoxCommunityProject = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxCommunityProject == null) {
        break missingId;
      }

      id = R.id.checkBox_disasterRelief;
      CheckBox checkBoxDisasterRelief = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxDisasterRelief == null) {
        break missingId;
      }

      id = R.id.checkBox_healthCare;
      CheckBox checkBoxHealthCare = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxHealthCare == null) {
        break missingId;
      }

      id = R.id.checkBox_highPriority;
      CheckBox checkBoxHighPriority = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxHighPriority == null) {
        break missingId;
      }

      id = R.id.checkBox_lowPriority;
      CheckBox checkBoxLowPriority = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxLowPriority == null) {
        break missingId;
      }

      id = R.id.checkBox_moderate;
      CheckBox checkBoxModerate = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxModerate == null) {
        break missingId;
      }

      id = R.id.checkBox_orphanage;
      CheckBox checkBoxOrphanage = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxOrphanage == null) {
        break missingId;
      }

      return new FragmentDonationDonateFilterBinding((ConstraintLayout) rootView,
          categoryDonateFilter, checkBoxCleanWater, checkBoxCommunityProject,
          checkBoxDisasterRelief, checkBoxHealthCare, checkBoxHighPriority, checkBoxLowPriority,
          checkBoxModerate, checkBoxOrphanage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
